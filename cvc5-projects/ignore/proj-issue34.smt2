(set-info :smt-lib-version 2.5)
(set-option :produce-models true)
(set-option :incremental true)
(set-logic ALL)
(push 1)
(assert (forall ((x String)) 
                (=  (str.in.re x (re.loop (str.to_re "a") 5 5))
                    (str.in.re x (str.to_re "aaaaa"))
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String)) 
                (=  (str.in.re x (re.loop (str.to_re "a") 0 0))
                    (str.in.re x (str.to_re ""))
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String)) 
                (=  (str.in.re x (re.++ (str.to_re "a") (re.* (str.to_re "a"))))
                    (str.in.re x (re.+ (str.to_re "a")))
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String))
                (=  (str.in.re x (re.union (re.++ (str.to_re "a") (str.to_re "b")) 
                                           (re.++ (str.to_re "a") (str.to_re "c"))
                                 )
                    )                                 
                    (str.in.re x (re.++ (str.to_re "a") (re.union (str.to_re "b")
                                                                  (str.to_re "c")
                                                        )
                                 )
                    )
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String))
                (=  (str.in.re x (re.range "a" "a"))
                    (str.in.re x (str.to_re "a"))
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String))
                (=  (str.in.re x (re.union (re.range "a" "k") (re.range "l" "z")))
                    (str.in.re x (re.range "a" "z"))
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String))
                (=  (str.in.re x (re.union (re.range "a" "p") (re.range "l" "z")))
                    (str.in.re x (re.range "a" "z"))
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String)(l1 Int)(l2 Int))
                (or
                    (not (and (>= l1 0) (>= l2 0)))
                    (=  (str.in.re x (re.++ (re.loop (str.to_re "a") l1) (re.loop (str.to_re "a") l2)))
                        (str.in.re x (re.loop (str.to_re "a") (+ l1 l2)))
                    )
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String)(l1 Int)(l2 Int)(u1 Int)(u2 Int))
                (or
                    (not (and (>= l1 0) (>= l2 0) (>= u1 0) (>= u2 0)))
                    (=  (str.in.re x (re.++ (re.loop (str.to_re "a") l1 u1) (re.loop (str.to_re "a") l2 u2)))
                        (str.in.re x (re.loop (str.to_re "a") (+ l1 l2) (+ u1 u2)))
                    )
                )
        )
)
(check-sat)
(pop 1)
(push 1)
(assert (forall ((x String)(l1 Int)(l2 Int)(u1 Int)(u2 Int))
                (or
                    (not (and (>= l1 0) (>= l2 0) (>= u1 0) (>= u2 0)))
                    (=  (str.in.re x (re.loop (re.loop (str.to_re "a") l1 u1) l2 u2))
                        (str.in.re x (re.loop (str.to_re "a") (* l1 l2) (* u1 u2)))
                    )
                )
        )
)
(check-sat)
(pop 1)
