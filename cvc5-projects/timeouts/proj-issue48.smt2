(set-option :smt.MBQI false)
(set-option :smt.core.minimize true)
(set-option :produce-unsat-cores true)
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun intType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)

(declare-fun __dummy_i__ (Int) Bool)

(assert (! (forall ((arg0 Int) )
           (! (= (U_2_int (int_2_U arg0)) arg0)
           :pattern ( (int_2_U arg0)) )) :named A0))

(assert (! (forall ((arg0@@0 Int) )
           (! (= (type (int_2_U arg0@@0)) intType)
           :pattern ( (int_2_U arg0@@0)) )) :named A1))

(assert (! (forall ((arg0@@34 T@T) (arg1@@7 T@T) )
           (! (= (MapTypeInv0 (MapType arg0@@34 arg1@@7)) arg0@@34)
           :pattern ( (MapType arg0@@34 arg1@@7)) )) :named A2))

(assert (! (forall ((arg0@@35 T@T) (arg1@@8 T@T) )
           (! (= (MapTypeInv1 (MapType arg0@@35 arg1@@8)) arg1@@8)
           :pattern ( (MapType arg0@@35 arg1@@8)) )) :named A3))

(assert (! (forall ((m@@9 T@U) )
           (! (let ((V@@4 (MapTypeInv1 (type m@@9)))) (let ((U@@5 (MapTypeInv0 (type m@@9))))
           (=> (= (type m@@9) (MapType U@@5 V@@4))
               (= (|Set#Card| (|Map#Values| m@@9)) (|Map#Card| m@@9)))))
           :pattern ( (|Set#Card| (|Map#Values| m@@9))) )) :named A4))

(assert (! (forall ((m@@10 T@U) (v@@36 T@U) )
           (! (let ((V@@5 (type v@@36))) (let ((U@@6 (MapTypeInv0 (type m@@10))))
           (=> (= (type m@@10) (MapType U@@6 V@@5))
               (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@10) v@@36))
                        (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@6) (and (U_2_bool (MapType0Select (|Map#Domain| m@@10) u@@5)) (= v@@36 (MapType0Select (|Map#Elements| m@@10) u@@5))))
                        :pattern ( (MapType0Select (|Map#Domain| m@@10) u@@5))
                        :pattern ( (MapType0Select (|Map#Elements| m@@10) u@@5)) )))
                    (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@6) (and (U_2_bool (MapType0Select (|Map#Domain| m@@10) u@@6)) (= v@@36 (MapType0Select (|Map#Elements| m@@10) u@@6))))
                        :pattern ( (MapType0Select (|Map#Domain| m@@10) u@@6))
                        :pattern ( (MapType0Select (|Map#Elements| m@@10) u@@6)) ))
                        (U_2_bool (MapType0Select (|Map#Values| m@@10) v@@36)))))))
           :pattern ( (MapType0Select (|Map#Values| m@@10) v@@36)) )) :named A5))

(assert (! (forall ((U@@8 T@T) (V@@7 T@T) ) (! (= (type (|Map#Empty| U@@8 V@@7)) (MapType U@@8 V@@7))
:pattern ( (|Map#Empty| U@@8 V@@7)) )) :named A6))

(assert (! (forall ((u@@7 T@U) (V@@8 T@T) )
           (! (let ((U@@9 (type u@@7)))
           (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@9 V@@8)) u@@7))))
           :pattern ( (let ((U@@9 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@9 V@@8)) u@@7))) )) :named A7))

(assert (! (forall ((m@@13 T@U) )
           (! (let ((V@@9 (MapTypeInv1 (type m@@13)))) (let ((U@@10 (MapTypeInv0 (type m@@13))))
           (=> (= (type m@@13) (MapType U@@10 V@@9))
               (and (and (=> (= (|Map#Card| m@@13) 0) (= m@@13 (|Map#Empty| U@@10 V@@9)))
                         (=> (= m@@13 (|Map#Empty| U@@10 V@@9)) (= (|Map#Card| m@@13) 0)))
                    (=> (not (= (|Map#Card| m@@13) 0))
                        (exists ((x@@39 T@U) ) (!  (and (= (type x@@39) U@@10) (U_2_bool (MapType0Select (|Map#Domain| m@@13) x@@39)))
                         :no-pattern (type x@@39)
                         :no-pattern (U_2_int x@@39)
                         :no-pattern (U_2_bool x@@39) )))))))
            :pattern ( (|Map#Card| m@@13)) )) :named A8))

(assert (! (forall ((arg0@@90 T@U) (arg1@@38 T@U) (arg2@@4 T@U) )
           (! (let ((V@@14 (type arg2@@4))) (let ((U@@15 (type arg1@@38)))
            (= (type (|Map#Build| arg0@@90 arg1@@38 arg2@@4)) (MapType U@@15 V@@14))))
:pattern ( (|Map#Build| arg0@@90 arg1@@38 arg2@@4)) )) :named A9))

(assert (! (forall ((m@@14 T@U) (u@@8 T@U) (|u'| T@U) (v@@37 T@U) )
           (! (let ((V@@15 (type v@@37))) (let ((U@@16 (type u@@8)))
           (=> (and (= (type m@@14) (MapType U@@16 V@@15)) (= (type |u'|) U@@16))
               (and (=> (= |u'| u@@8)
                        (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|))
                             (= (MapType0Select (|Map#Elements| (|Map#Build| m@@14 u@@8 v@@37)) |u'|) v@@37)))
                    (=> (not (= |u'| u@@8))
                        (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|))
                                      (U_2_bool (MapType0Select (|Map#Domain| m@@14) |u'|)))
                                  (=> (U_2_bool (MapType0Select (|Map#Domain| m@@14) |u'|))
                                      (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|))))
                             (= (MapType0Select (|Map#Elements| (|Map#Build| m@@14 u@@8 v@@37)) |u'|) (MapType0Select (|Map#Elements| m@@14) |u'|))))))))
           :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|))
           :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@14 u@@8 v@@37)) |u'|)) )) :named A10))

(assert (! (forall ((m@@16 T@U) (u@@10 T@U) (v@@39 T@U) )
           (! (let ((V@@17 (type v@@39))) (let ((U@@18 (type u@@10)))
           (=> (and (= (type m@@16) (MapType U@@18 V@@17))
                    (not (U_2_bool (MapType0Select (|Map#Domain| m@@16) u@@10))))
               (= (|Map#Card| (|Map#Build| m@@16 u@@10 v@@39)) (+ (|Map#Card| m@@16) 1)))))
           :pattern ( (|Map#Card| (|Map#Build| m@@16 u@@10 v@@39))) )) :named A11))

(assert (! (forall ((m@@17 T@U) (u@@11 T@U) (v@@40 T@U) )
           (! (let ((V@@18 (type v@@40))) (let ((U@@19 (type u@@11)))
           (=> (= (type m@@17) (MapType U@@19 V@@18))
               (= (|Map#Values| (|Map#Build| m@@17 u@@11 v@@40)) (|Set#UnionOne| (|Map#Values| m@@17) v@@40)))))
           :pattern ( (|Map#Values| (|Map#Build| m@@17 u@@11 v@@40))) )) :named A12))

(assert (! (forall ((arg0@@63 T@U) (arg1@@19 T@U) )
           (! (let ((T@@11 (type arg1@@19)))
           (= (type (|Set#UnionOne| arg0@@63 arg1@@19)) (MapType0Type T@@11 boolType)))
           :pattern ( (|Set#UnionOne| arg0@@63 arg1@@19)) )) :named A13))

(assert (! (forall ((a@@4 T@U) (x@@20 T@U) )
           (! (let ((T@@15 (type x@@20)))
           (=> (and (= (type a@@4) (MapType0Type T@@15 boolType))
                    (U_2_bool (MapType0Select a@@4 x@@20)))
               (= (|Set#Card| (|Set#UnionOne| a@@4 x@@20)) (|Set#Card| a@@4))))
           :pattern ( (|Set#Card| (|Set#UnionOne| a@@4 x@@20))) )) :named A14))

(assert (! (forall ((a@@5 T@U) (x@@21 T@U) )
           (! (let ((T@@16 (type x@@21)))
           (=> (and (= (type a@@5) (MapType0Type T@@16 boolType))
                    (not (U_2_bool (MapType0Select a@@5 x@@21))))
               (= (|Set#Card| (|Set#UnionOne| a@@5 x@@21)) (+ (|Set#Card| a@@5) 1))))
           :pattern ( (|Set#Card| (|Set#UnionOne| a@@5 x@@21))) )) :named A15))

;(assert (! (__dummy_i__ (|Set#Card| (|Map#Values| (|Map#Build| (|Map#Build| (|Map#Empty| intType intType) (int_2_U 1) (int_2_U 1)) (int_2_U 2) (int_2_U 1))))) :named A16))

(check-sat)
(get-unsat-core)

